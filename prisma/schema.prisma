// ================================================================
// Description: Prisma schema for the database models
// Author: Noah Huesman

// Creation Date: 01/02/2025
// Modification History:
// #1 (01/02/2025) - Initial creation - Noah Huesman
// #2 (01/03/2025) - Added Auth.js models - Noah Huesman
// #3 (01/30/2025) - Added comments to document model - Noah Huesman
//=================================================================

// ========================================
// PRISMA CONFIGURATION
// ========================================

// Datasource
datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Prisma client
generator client {
    provider = "prisma-client-js"
}

// ========================================
// AUTH.JS MODELS
// ========================================

// Role enum
enum Role {
    USER
    MODERATOR
    ADMIN
}

// User model
model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    documents Document[]
}

// Account model
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Session model
model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Verification token model
model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// ========================================
// MODELS
// ========================================

// Document model
model Document {
    // id
    id String @id @default(auto()) @map("_id") @db.ObjectId

    // Name of document
    name String

    // Content of document
    content String

    // User relation to link documents to a user
    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
